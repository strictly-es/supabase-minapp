1. Supabase プロジェクト設定
	1.	プロジェクト作成（既存があれば流用でOK）
	2.	Auth（メール+パスワード）設定
	•	Dashboard → Auth → Providers → Email
	•	Enable: ON
	•	Allow new users to sign up: OFF（サインアップ禁止）
	•	Dashboard → Auth → Users
	•	Invite user で社内ユーザーを招待
→ 招待メールからユーザーがパスワード設定（以後 Email+PW でログイン）
	3.	Storage バケット作成
	•	Dashboard → Storage → Create new bucket
	•	Bucket name: uploads
	•	Public: OFF（＝Private）
	•	作成
	4.	Project API キーの確認
	•	Dashboard → Project Settings → API
	•	Project URL（例: https://xxxxxx.supabase.co）
	•	anon public key（ブラウザ用）
	•	※ service role はフロントに置かないこと（サーバ用）

2. データベース（テーブル & RLSポリシー）

SQL Editor に以下をそのまま貼り付けて実行（1回でOK）。
ポイント：
	•	投稿データは posts テーブル
	•	RLS（Row Level Security）で「自分のデータだけ」を読める/追加できる
	•	Storage 側は「自分のUIDフォルダ配下」だけアップロード・閲覧を許可

-- 1) 投稿テーブル
create table if not exists public.posts (
  id         uuid primary key default gen_random_uuid(),
  user_id    uuid not null references auth.users(id) on delete cascade,
  content    text not null,
  file_path  text,
  created_at timestamptz not null default now()
);

-- RLS 有効化
alter table public.posts enable row level security;

-- 自分の行だけ読める
drop policy if exists read_own_posts on public.posts;
create policy read_own_posts
on public.posts for select
to authenticated
using (auth.uid() = user_id);

-- 自分の行だけ挿入できる
drop policy if exists insert_own_posts on public.posts;
create policy insert_own_posts
on public.posts for insert
to authenticated
with check (auth.uid() = user_id);



-- 2) Storage（uploads バケット）: 自分のUIDフォルダのみ許可
-- 期待パス: <user_id>/<ファイル名>
-- 例: 00000000-0000-0000-0000-000000000000/1696151112-report.pdf

-- 読み取り
drop policy if exists read_own_files on storage.objects;
create policy read_own_files
on storage.objects for select
to authenticated
using (
  bucket_id = 'uploads'
  and split_part(name, '/', 1) = auth.uid()::text
);


-- アップロード（登録）
drop policy if exists insert_own_files on storage.objects;
create policy insert_own_files
on storage.objects for insert
to authenticated
with check (
  bucket_id = 'uploads'
  and split_part(name, '/', 1) = auth.uid()::text
);

3. Next.js プロジェクト作成（App Router）
# 新規プロジェクト
npx create-next-app@latest supabase-minapp --typescript --eslint
cd supabase-minapp

# Supabase JS SDK
npm i @supabase/supabase-js

3-1. 環境変数（クライアントで使うので NEXT_PUBLIC_）

プロジェクト直下に .env.local を作成：
NEXT_PUBLIC_SUPABASE_URL=https://<YOUR-PROJECT-REF>.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=<YOUR-ANON-KEY>

3-2. Supabase クライアント

src/lib/supabaseClient.ts を作成：

// src/lib/supabaseClient.ts
import { createClient } from '@supabase/supabase-js'

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL as string
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  throw new Error('Supabase env vars are missing. Set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY')
}

export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)


3-3. トップページ（ログイン/投稿/一覧）

app/page.tsx（クライアントコンポーネント）：
本コード

4. 起動と動作確認
npm run dev
# ブラウザで http://localhost:3000 を開く